# -*- coding: utf-8 -*-
"""ChatGpt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ryVoMiH-NZxVdSTnJ01uEfMT8qI_Ij_v
"""

!pip install openai
!pip install plantuml
!pip install python-docx

from plantuml import PlantUML
from docx import Document
from docx.shared import Inches
import openai
import json

#  Constants
openai.api_key = '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'
model_name = 'gpt-3.5-turbo'
generic_prompt = """
>>>I have an ITaskHandler interface that implements handler function which is responsible for generating fixed output if the request matches certain requirements. ITaskHandler is implemented by classes AdditionTask, MultiplyTask, DivideTask. Client calls ITaskHandler through a chain of responsibility design pattern. <<<

======
Intsuction prompt
Read >>>CONTENT<<< and generate JSON in the below format
{
"DesignDoc": [
  "Intent":,
  "Pros",
  "Cons",
"Diagram": this provides diagram of the content in plantuml output format
}
======

---
Example

User:I have a service A, which calls service B for sku info, and service C for OS info. Based on information from B and C, service A calls a method called pushConfig which takes sku and os as input. Based on sku and os, the pushConfig method sends a command to a device.
Assistant: Here is the data you requested:
{
"DesignDoc":{
  "Intent",
  "Solution",
  "Pros",
  "Cons"},
"Diagram": \"\"\"
@startuml
actor User

User -> ServiceA : Request SKU Info
ServiceA -> ServiceB : Request SKU Info
ServiceB -> ServiceA : Return SKU Info
ServiceA -> ServiceC : Request OS Info
ServiceC -> ServiceA : Return OS Info
ServiceA -> Device : Send Command

@enduml
\"\"\"
}

"""
uml_text_file_path = "/plantUml.txt"
uml_img_file_path = "/plantUml.png"
doc_path = '/chatgptdoc.docx'


# Functions
def get_completion():
    chat_completion = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": generic_prompt}])
    return chat_completion.choices[0].message.content

def Convert_string_to_json(st):
  st = st.replace('"""','"')
  json_output = json.loads(st, strict=False)
  return json_output

def write_file(text, path):
  with open(path, 'w') as f:
    f.write(text)

def Create_plantUml_img(source, destination):
  server = PlantUML(url='http://www.plantuml.com/plantuml/img/',
                            basic_auth={},
                            form_auth={}, http_opts={}, request_opts={})
  server.processes_file(source, destination)

def create_document_from_json(json_obj, main_heading, img_path, doc_path):
  document = Document()
  document.add_heading(main_heading, 0)

  for key in json_obj.keys():
    document.add_heading(key, level=1)

    if(isinstance(json_obj[key], str)):
      document.add_paragraph(json_obj[key], style='Intense Quote')

    if(isinstance(json_obj[key], list)):
      for list_item in json_obj[key]:
        document.add_paragraph(list_item, style='List Bullet')

  document.add_picture(img_path, width=Inches(1.25))

  document.add_page_break()

  document.save(doc_path)

# output_gpt = get_completion()
json_output_gpt = Convert_string_to_json(output_gpt)
write_file(json_output_gpt['Diagram'], uml_text_file_path)
Create_plantUml_img(uml_text_file_path, uml_img_file_path)
create_document_from_json(json_output_gpt['DesignDoc'], "document", uml_img_file_path, doc_path)